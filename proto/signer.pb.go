// Code generated by protoc-gen-go.
// source: signer.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	signer.proto

It has these top-level messages:
	KeyInfo
	KeyID
	Algorithm
	PublicKey
	Signature
	SignatureRequest
	Void
	HealthStatus
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// KeyInfo holds a KeyID that is used to reference the key and it's algorithm
type KeyInfo struct {
	KeyID     *KeyID     `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *KeyInfo) Reset()                    { *m = KeyInfo{} }
func (m *KeyInfo) String() string            { return proto1.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()               {}
func (*KeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyInfo) GetKeyID() *KeyID {
	if m != nil {
		return m.KeyID
	}
	return nil
}

func (m *KeyInfo) GetAlgorithm() *Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

// KeyID holds an ID that is used to reference the key
type KeyID struct {
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *KeyID) Reset()                    { *m = KeyID{} }
func (m *KeyID) String() string            { return proto1.CompactTextString(m) }
func (*KeyID) ProtoMessage()               {}
func (*KeyID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Type holds the type of crypto algorithm used
type Algorithm struct {
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *Algorithm) Reset()                    { *m = Algorithm{} }
func (m *Algorithm) String() string            { return proto1.CompactTextString(m) }
func (*Algorithm) ProtoMessage()               {}
func (*Algorithm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// PublicKey has a KeyInfo that is used to reference the key, and opaque bytes of a publicKey
type PublicKey struct {
	KeyInfo   *KeyInfo `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
	PublicKey []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto1.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PublicKey) GetKeyInfo() *KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

// Signature specifies a KeyInfo that was used for signing and signed content
type Signature struct {
	KeyInfo   *KeyInfo   `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
	Content   []byte     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto1.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Signature) GetKeyInfo() *KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Signature) GetAlgorithm() *Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

// SignatureRequests specifies a KeyInfo, and content to be signed
type SignatureRequest struct {
	KeyID   *KeyID `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SignatureRequest) Reset()                    { *m = SignatureRequest{} }
func (m *SignatureRequest) String() string            { return proto1.CompactTextString(m) }
func (*SignatureRequest) ProtoMessage()               {}
func (*SignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignatureRequest) GetKeyID() *KeyID {
	if m != nil {
		return m.KeyID
	}
	return nil
}

// Void represents an empty message type
type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto1.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// A mapping of health check name to the check result message
type HealthStatus struct {
	Status map[string]string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HealthStatus) Reset()                    { *m = HealthStatus{} }
func (m *HealthStatus) String() string            { return proto1.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()               {}
func (*HealthStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HealthStatus) GetStatus() map[string]string {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto1.RegisterType((*KeyInfo)(nil), "proto.KeyInfo")
	proto1.RegisterType((*KeyID)(nil), "proto.KeyID")
	proto1.RegisterType((*Algorithm)(nil), "proto.Algorithm")
	proto1.RegisterType((*PublicKey)(nil), "proto.PublicKey")
	proto1.RegisterType((*Signature)(nil), "proto.Signature")
	proto1.RegisterType((*SignatureRequest)(nil), "proto.SignatureRequest")
	proto1.RegisterType((*Void)(nil), "proto.Void")
	proto1.RegisterType((*HealthStatus)(nil), "proto.HealthStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for KeyManagement service

type KeyManagementClient interface {
	// CreateKey creates as asymmetric key pair and returns the PublicKey
	CreateKey(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*PublicKey, error)
	// DeleteKey deletes the key associated with a KeyID
	DeleteKey(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*Void, error)
	// GetKeyInfo returns the PublicKey associated with a KeyID
	GetKeyInfo(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*PublicKey, error)
	// CheckHealth returns the HealthStatus with the service - note: since the
	// KeyManagement service is probably deployed on the same server as the Signer
	// service, we're only putting the CheckHealth function on the KeyManagement
	// service, to avoid confusion and to avoid clients polling both.
	CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error)
}

type keyManagementClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagementClient(cc *grpc.ClientConn) KeyManagementClient {
	return &keyManagementClient{cc}
}

func (c *keyManagementClient) CreateKey(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) DeleteKey(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/DeleteKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) GetKeyInfo(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/GetKeyInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyManagement service

type KeyManagementServer interface {
	// CreateKey creates as asymmetric key pair and returns the PublicKey
	CreateKey(context.Context, *Algorithm) (*PublicKey, error)
	// DeleteKey deletes the key associated with a KeyID
	DeleteKey(context.Context, *KeyID) (*Void, error)
	// GetKeyInfo returns the PublicKey associated with a KeyID
	GetKeyInfo(context.Context, *KeyID) (*PublicKey, error)
	// CheckHealth returns the HealthStatus with the service - note: since the
	// KeyManagement service is probably deployed on the same server as the Signer
	// service, we're only putting the CheckHealth function on the KeyManagement
	// service, to avoid confusion and to avoid clients polling both.
	CheckHealth(context.Context, *Void) (*HealthStatus, error)
}

func RegisterKeyManagementServer(s *grpc.Server, srv KeyManagementServer) {
	s.RegisterService(&_KeyManagement_serviceDesc, srv)
}

func _KeyManagement_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Algorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManagement/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServer).CreateKey(ctx, req.(*Algorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagement_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManagement/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServer).DeleteKey(ctx, req.(*KeyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagement_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManagement/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServer).GetKeyInfo(ctx, req.(*KeyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManagement_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagementServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManagement/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagementServer).CheckHealth(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KeyManagement",
	HandlerType: (*KeyManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KeyManagement_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyManagement_DeleteKey_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _KeyManagement_GetKeyInfo_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _KeyManagement_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Signer service

type SignerClient interface {
	// Sign calculates a cryptographic signature using the Key associated with a KeyID and returns the signature
	Sign(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*Signature, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) Sign(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := grpc.Invoke(ctx, "/proto.Signer/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signer service

type SignerServer interface {
	// Sign calculates a cryptographic signature using the Key associated with a KeyID and returns the signature
	Sign(context.Context, *SignatureRequest) (*Signature, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Signer/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).Sign(ctx, req.(*SignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Signer_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("signer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x0b, 0xd3, 0x30,
	0x14, 0xc7, 0xdb, 0x6e, 0xed, 0xc8, 0x6b, 0x1d, 0x23, 0x0a, 0x2b, 0x45, 0x50, 0x72, 0x9a, 0x97,
	0xc2, 0xb6, 0x83, 0x3f, 0xc0, 0x83, 0xac, 0xa2, 0x22, 0xc2, 0x48, 0xc1, 0x9b, 0x87, 0x6e, 0xc6,
	0xad, 0xac, 0x6b, 0x67, 0x9b, 0x0a, 0x3b, 0x09, 0xfe, 0x83, 0xfe, 0x4b, 0xa6, 0x49, 0xda, 0x75,
	0xba, 0x83, 0x3b, 0xe5, 0xe5, 0xbd, 0xef, 0xfb, 0xec, 0x9b, 0xf7, 0x56, 0xf0, 0xaa, 0x74, 0x97,
	0xb3, 0x32, 0x3c, 0x95, 0x05, 0x2f, 0xb0, 0x2d, 0x0f, 0xf2, 0x05, 0x46, 0x1f, 0xd9, 0xf9, 0x43,
	0xfe, 0xad, 0xc0, 0x04, 0xec, 0x83, 0x08, 0x23, 0xdf, 0x7c, 0x6a, 0xce, 0xdc, 0x85, 0xa7, 0x84,
	0x61, 0x53, 0x8e, 0xa8, 0x2a, 0xe1, 0x10, 0x50, 0x92, 0xed, 0x8a, 0x32, 0xe5, 0xfb, 0xa3, 0x6f,
	0x49, 0xdd, 0x44, 0xeb, 0xde, 0xb4, 0x79, 0x7a, 0x91, 0x90, 0x29, 0xd8, 0xb2, 0x1f, 0x8f, 0xc1,
	0xd2, 0x64, 0x44, 0xad, 0x34, 0x22, 0xcf, 0x00, 0x75, 0x0d, 0xf8, 0x71, 0x9f, 0xaa, 0x34, 0x3d,
	0x46, 0x0c, 0x68, 0x5d, 0x6f, 0xb2, 0x74, 0x2b, 0x48, 0x78, 0x06, 0xa3, 0x83, 0xf2, 0xab, 0x6d,
	0x8e, 0x7b, 0x36, 0x45, 0x96, 0xb6, 0xe5, 0x06, 0x7a, 0x6a, 0xdb, 0xa4, 0x55, 0x8f, 0x5e, 0x12,
	0xe4, 0x27, 0xa0, 0x58, 0x8c, 0x23, 0xe1, 0x75, 0xc9, 0xee, 0x80, 0xde, 0xf9, 0x7e, 0xec, 0xc3,
	0x68, 0x5b, 0xe4, 0x9c, 0xe5, 0xdc, 0x1f, 0x48, 0x0b, 0xed, 0x95, 0xac, 0x61, 0xd2, 0x19, 0xa0,
	0xec, 0x7b, 0xcd, 0x2a, 0xfe, 0x5f, 0x1b, 0xe8, 0x11, 0xad, 0x6b, 0xa2, 0x03, 0xc3, 0xcf, 0x45,
	0xfa, 0x95, 0xfc, 0x32, 0xc1, 0x7b, 0xcf, 0x92, 0x8c, 0xef, 0x63, 0x2e, 0xf0, 0x15, 0x7e, 0x0e,
	0x4e, 0x25, 0x23, 0xc1, 0x1d, 0x08, 0xee, 0x13, 0xcd, 0xed, 0x8b, 0x42, 0x75, 0xbc, 0xcd, 0x79,
	0x79, 0xa6, 0x5a, 0x1e, 0xbc, 0x04, 0xb7, 0x97, 0xc6, 0x13, 0x18, 0x08, 0x0f, 0x7a, 0x41, 0x4d,
	0x88, 0x1f, 0x81, 0xfd, 0x23, 0xc9, 0x6a, 0x26, 0xad, 0x20, 0xaa, 0x2e, 0xaf, 0xac, 0x17, 0xe6,
	0xe2, 0xb7, 0x09, 0x0f, 0x84, 0xef, 0x4f, 0x49, 0x9e, 0xec, 0xd8, 0x51, 0xd8, 0xc3, 0x73, 0x40,
	0xab, 0x92, 0x25, 0x9c, 0x35, 0x6b, 0xfc, 0x67, 0x68, 0x41, 0x9b, 0xe9, 0x56, 0x4d, 0x0c, 0xb1,
	0x17, 0x14, 0xb1, 0x8c, 0xa9, 0x96, 0xab, 0x69, 0x04, 0xae, 0xbe, 0xc9, 0x17, 0x1b, 0x62, 0x2f,
	0xf0, 0x8e, 0xf1, 0xf6, 0x9f, 0x7c, 0x2d, 0xbd, 0x45, 0x9e, 0x83, 0xbb, 0xda, 0xb3, 0xed, 0x41,
	0x8d, 0x00, 0xf7, 0x69, 0xc1, 0xc3, 0x1b, 0xe3, 0x21, 0xc6, 0xe2, 0x35, 0x38, 0xb1, 0xfc, 0x80,
	0xf0, 0x12, 0x86, 0x4d, 0x84, 0xa7, 0x5a, 0xf8, 0xf7, 0x1e, 0xbb, 0x5f, 0xec, 0x0a, 0xc4, 0xd8,
	0x38, 0x32, 0xb5, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x14, 0x63, 0xc3, 0x53, 0x86, 0x03, 0x00,
	0x00,
}
